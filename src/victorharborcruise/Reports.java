/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package victorharborcruise;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;

/**
 * This class generates the reports of the data of cruise including passengers 
 * data, sailors data, ships data, ports of call data and cruise evaluation data.
 * 
 * @author Ayush Malik
 */
public class Reports {
    
    /**
     * This method help to generate a CSV file to show the report of revenue
     * generated by each passenger with their age and nationality.
     * 
     * @param cruise
     * @throws ParseException
     * @throws IOException 
     */
    public void revenueGenerated(Cruise cruise) throws ParseException, IOException{
        // Create a csv file with name having cruise number 
        String filePath = "E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\Revenue_Generated_" + Integer.toString(cruise.getCruiseNumber()) + ".csv";
        FileWriter csvWriter = new FileWriter(filePath);
        PrintWriter pw = new PrintWriter(csvWriter);
        
        // to print the header row in the csv file
        pw.print("Passenger Name");
        pw.print(",");
        pw.print("Revenue");
        pw.print(",");
        pw.print("Nationality");
        pw.print(",");
        pw.println("Age");
        
        for (int i = 0; i < cruise.getPassengersTravelled().size(); i++) {
            // calculate the revenue of each passenger
            double revenue = cruise.getPassengersTravelled().get(i).getJoiningFees() + cruise.getPassengersTravelled().get(i).getMoneySpentOnCruise();
            
            // calculate the age of the each passenger
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date d = sdf.parse(cruise.getPassengersTravelled().get(i).getDateOfBirth());
            Calendar c = Calendar.getInstance();
            c.setTime(d);
            int year = c.get(Calendar.YEAR);
            int month = c.get(Calendar.MONTH) + 1;
            int date = c.get(Calendar.DATE);
            LocalDate ld = LocalDate.of(year, month, date);
            LocalDate now1 = LocalDate.now();
            Period diff1 = Period.between(ld, now1);
            
            // print the details of passenger in csv file
            pw.print(cruise.getPassengersTravelled().get(i).getName());
            pw.print(",");
            pw.print(Double.toString(revenue));
            pw.print(",");
            pw.print(cruise.getPassengersTravelled().get(i).getNationality());
            pw.print(",");
            pw.println(Integer.toString(diff1.getYears()));
        }
        pw.flush();
        pw.close();
        csvWriter.close();
        
        System.out.println("\nReport is generated in the path : E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\\n");
    }  
    
    /**
     * This method generates a report about sailors, how much money spent on 
     * sailors and what is the total docking fee of the ship.
     * @param cruise 
     */
    public void sailorDetails(Cruise cruise){
        double costOfSailor = 0;
        double costOfDocking;
        System.out.println(padRight("Sailor id",30) +padRight("Sailor name",30)+padRight("Date of Birth",30)+ padRight("Nationality",30)+ padRight("Salary",30)+padRight("Supervisor(0/1)",30)+"\n");
        
        for (int i = 0; i < cruise.getShipInvolved().getSailor().size(); i++){
            // call the Override toString() method to print the details of the sailor
            System.out.println(cruise.getShipInvolved().getSailor().get(i));
            // calculate the cost of sailors
            costOfSailor = costOfSailor + cruise.getShipInvolved().getSailor().get(i).getSalary();
        }
        
        // calculate the total cost of docking 
        costOfDocking = cruise.getShipInvolved().getDockingFee() * cruise.getPortsOfCall().size();
            
        System.out.println("\n\nTotal cost of sailors (AUD) :  " + costOfSailor);
        System.out.println("\nTotal cost of docking at different ports (AUD) :  "+ costOfDocking);
    }
    
    
    /**
     * This method prints the details of passengers sorted by the money spent on cruise.
     * 
     * @param cruise 
     */
    public void passengerDetails(Cruise cruise){ 
        // using comparable interface, sorted the passenger object on field basis.
        Collections.sort(cruise.getPassengersTravelled());
        for(Passenger p: cruise.getPassengersTravelled()){
			System.out.println(p);      // overloaded the toString()
	   }
    }
    
    /**
     * this method prints the average rating given by passengers for each of the 5 question 
     * and then calculates the overall rating of the cruise out of 5.
     * @param cruise 
     */
    public void cruiseEvaluationReport(Cruise cruise){
        double question1 = 0,question2=0,question3=0,question4=0,question5=0, average;
        int length = cruise.getPassengersTravelled().size();
        for(int i=0; i< cruise.getPassengersTravelled().size(); i++){
            int a[] = cruise.getPassengersTravelled().get(i).getCruiseEvaluation();
            question1 += a[0];
            question2 += a[1];
            question3 += a[2];
            question4 += a[3];
            question5 += a[4];
        }
        average = (round(question1/length) + round(question2/length) +round(question3/length)+ round(question4/length) + round(question5/length))/5;
        System.out.println("\n\nCruise Evaluation :\n\n" + padRight("Question 1",15) + padRight("Question 2",15)+ padRight("Question 3",15) +
                padRight("Question 4",15) + padRight("Question 5",15) + "\n");
        System.out.println(padRight(Double.toString(round(question1/length)),15) + padRight(Double.toString(round(question2/length)),15) +
                padRight(Double.toString(round(question3/length)),15) + padRight(Double.toString(round(question4/length)),15) + 
                padRight(Double.toString(round(question5/length)),15));
        System.out.println("\n***    Average rating of cruise  : " + round(average) + " out of 5    ***\n");
    }
    
    /** Print if the ship is making profit or loss depending on revenue and cost of sailors and docking fee.**/
    public void isShipMakingProfit(Cruise cruise){
        double costOfSailor = 0;
        double totalCost;
        double revenue = 0;
        double profit;
        for (int i = 0; i < cruise.getShipInvolved().getSailor().size(); i++){
            // calculate the cost of sailors
            costOfSailor = costOfSailor + cruise.getShipInvolved().getSailor().get(i).getSalary();
        }
        // calculate the total cost of docking 
        totalCost = costOfSailor + cruise.getShipInvolved().getDockingFee() * cruise.getPortsOfCall().size();
        
        for (int i = 0; i < cruise.getPassengersTravelled().size(); i++) {
            // calculate the revenue of each passenger
            revenue += cruise.getPassengersTravelled().get(i).getJoiningFees() + cruise.getPassengersTravelled().get(i).getMoneySpentOnCruise();            
        }
        profit = revenue - totalCost;
        if(profit < 0){
            profit *= -1;
            System.out.println("\nThe Ship is having a loss of : $ " + profit);
        }
        else if (profit > 0){
            System.out.println("\nThe Ship is having a profit of : $ " + profit);
        }
        else if (profit == 0){
            System.out.println("\nThe Ship is neither making a profit nor a loss... ");
        }
    } 
    
    /**
     *  this method helps in creating text files based on cruise information, 
     *  passengers traveled, sailors present and ports of calls.
     * 
     * @param cruise
     * @throws java.io.IOException
     */
    public void generateCruiseInformation(Cruise cruise) throws IOException{
        //generate text file for the cruise information
        String filePath = "E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\Cruise_"+ Integer.toString(cruise.getCruiseNumber()) + ".txt";
        FileWriter csvWriter = new FileWriter(filePath);
        PrintWriter pw = new PrintWriter(csvWriter);
        pw.println("Cruise Number   : " + cruise.getCruiseNumber());
        pw.println("Ship Involved   : " + cruise.getShipInvolved().getShipName());
        pw.println("Sailing Date    : " + cruise.getSailingDate());
        pw.println("Return Date     : " + cruise.getReturnDate());
        pw.println("Departure Port  : " + cruise.getDeparturePort().getPortName());
        pw.print("Port of Calls   : ");
        for ( int i = 0; i< cruise.getPortsOfCall().size(); i++){
            pw.println(cruise.getPortsOfCall().get(i).getPortName());
            pw.print("                  ");
        }
        pw.flush();
        pw.close();
        csvWriter.close(); 
        
        //generate text file for passengers of the cruise
        filePath = "E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\Passengers_Travelled_In_Cruise_" + Integer.toString(cruise.getCruiseNumber()) + ".txt";
        csvWriter = new FileWriter(filePath);
        pw = new PrintWriter(csvWriter);
        for (int i = 0; i < cruise.getPassengersTravelled().size(); i++) {
            pw.println("Passenger Number         : " + cruise.getPassengersTravelled().get(i).getPassengerNumber());
            pw.println("Passenger Name           : " + cruise.getPassengersTravelled().get(i).getName());
            pw.println("Home Address             : " + cruise.getPassengersTravelled().get(i).getHomeAddress());
            pw.println("Nationality              : " + cruise.getPassengersTravelled().get(i).getNationality());
            pw.println("Date of Birth            : " + cruise.getPassengersTravelled().get(i).getDateOfBirth());
            pw.println("Joining Fees ($)         : " + cruise.getPassengersTravelled().get(i).getJoiningFees());
            pw.println("Money Spent on Cruise($) : " + cruise.getPassengersTravelled().get(i).getMoneySpentOnCruise());
            pw.println("Total Spent on Cruise($) : " + (cruise.getPassengersTravelled().get(i).getJoiningFees() +
                     cruise.getPassengersTravelled().get(i).getMoneySpentOnCruise()));
            pw.println("");
        }
        pw.flush();
        pw.close();
        csvWriter.close(); 
        
        //generate text file based on ports of call of the ship
        filePath = "E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\Ports_of_Call_of_Cruise_" + Integer.toString(cruise.getCruiseNumber()) + ".txt";
        csvWriter = new FileWriter(filePath);
        pw = new PrintWriter(csvWriter);
        for (int i = 0; i < cruise.getPortsOfCall().size(); i++) {
            pw.println("Port Name         : " + cruise.getPortsOfCall().get(i).getPortName());
            pw.println("Port Country      : " + cruise.getPortsOfCall().get(i).getCountry());
            pw.println("Port Population   : " + cruise.getPortsOfCall().get(i).getPopulation());
            pw.println("Passport Required : " + cruise.getPortsOfCall().get(i).getIsPassportRequired());
            pw.println("");
        }
        pw.flush();
        pw.close();
        csvWriter.close();
        
        // generates informaton about the sailors of the ship.
        filePath = "E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\Sailors_on_Cruise_" + Integer.toString(cruise.getCruiseNumber()) + ".txt";
        csvWriter = new FileWriter(filePath);
        pw = new PrintWriter(csvWriter);
        for (int i = 0; i < cruise.getShipInvolved().getSailor().size(); i++) {
            pw.println("Sailor ID        : " + cruise.getShipInvolved().getSailor().get(i).getSailorId());
            pw.println("Sailor Name      : " + cruise.getShipInvolved().getSailor().get(i).getSailorName());
            pw.println("Date of birth    : " + cruise.getShipInvolved().getSailor().get(i).getDateOfBirth());
            pw.println("Sailor's salary  : " + cruise.getShipInvolved().getSailor().get(i).getSalary());
            pw.println("Nationality      : " + cruise.getShipInvolved().getSailor().get(i).getNationality());
            if(cruise.getShipInvolved().getSailor().get(i).getIsSupervisor()==1){
                pw.println("Supervisor       : YES");
            }
            else if(cruise.getShipInvolved().getSailor().get(i).getIsSupervisor()==0){
                pw.println("Supervisor       : NO");
            }
            pw.println("");
        }
        pw.flush();
        pw.close();
        csvWriter.close();
        
        System.out.println("\nText files are generated in the path : E:\\CMU\\semester1\\JAVA OOP\\Assignment 3\\VictorHarborCruise\\src\\\n");
    }
    
    // this method help is rounding the decimals to 2 digits.
    public double round(double d){
        return Math.round(d * 100.0)/100.0;
    }
    
    
    /**
     * This function is used to pad spaces on the right side of the input string
     * s upto the length provided as input n.
     *
     * @param s is String.
     * @param n is length.
     * @return is of type String which is a space padded string.
     */
    public String padRight(String s, int n) {
        return String.format("%-" + n + "s", s);
    }
}